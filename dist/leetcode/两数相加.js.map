{"version":3,"sources":["leetcode/两数相加.js","leetcode/两数相加.ts"],"names":["Object","defineProperty","exports","value","ListNode","val","next","undefined","addTwoNumbers","l1","l2","re","ten","item1","item2","flag","cur","n"],"mappings":"AAAA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;ICEMC,Q,GAGJ,kBAAYC,GAAZ,EAA0BC,IAA1B,EAAgD;AAAA;;AAC9C,OAAKD,GAAL,GAAYA,GAAG,KAAGE,SAAN,GAAkB,CAAlB,GAAsBF,GAAlC;AACA,OAAKC,IAAL,GAAaA,IAAI,KAAGC,SAAP,GAAmB,IAAnB,GAA0BD,IAAvC;AACD,C;;AAQH,SAASE,aAAT,CAAuBC,EAAvB,EAAqCC,EAArC,EAAiD;AAC/C,MAAMC,EAAE,GAAG,IAAIP,QAAJ,EAAX;AAEA,MAAIQ,GAAG,GAAG,CAAV;AACA,MAAIC,KAAK,GAAkBJ,EAA3B;AACA,MAAIK,KAAK,GAAkBJ,EAA3B;AACA,MAAIK,IAAI,GAAG,IAAX;AACA,MAAIC,GAAG,GAAGL,EAAE,CAACL,IAAb;;AAEA,SAAMS,IAAN,EAAW;AACT,QAAIE,CAAC,GAAGR,EAAE,CAACJ,GAAH,GAASK,EAAE,CAACL,GAAZ,GAAkBO,GAA1B;AACAA,IAAAA,GAAG,GAAGK,CAAC,GAAC,EAAF,GAAK,CAAL,GAAO,CAAb;AACAA,IAAAA,CAAC,IAAI,EAAL;AACAD,IAAAA,GAAG,GAAG,IAAIZ,QAAJ,CAAaa,CAAb,CAAN;;AAEA,QAAGJ,KAAK,CAACP,IAAN,KAAe,IAAf,IAAuBQ,KAAK,CAACR,IAAN,KAAe,IAAzC,EAA8C;AAC5C,UAAGM,GAAG,KAAK,CAAX,EAAa;AACXC,QAAAA,KAAK,GAAG,IAAIT,QAAJ,EAAR;AACAU,QAAAA,KAAK,GAAGA,KAAK,CAACR,IAAd;AACD,OAHD,MAGK;AACHK,QAAAA,EAAE,CAACL,IAAH,GAAUQ,KAAK,CAACR,IAAhB;AACAS,QAAAA,IAAI,GAAG,KAAP;AACD;AACF,KARD,MAQM,IAAGF,KAAK,CAACP,IAAN,KAAe,IAAf,IAAuBQ,KAAK,CAACR,IAAN,KAAe,IAAzC,EAA8C;AAClD,UAAGM,GAAG,KAAK,CAAX,EAAa;AACXC,QAAAA,KAAK,GAAGA,KAAK,CAACP,IAAd;AACAQ,QAAAA,KAAK,GAAG,IAAIV,QAAJ,EAAR;AACD,OAHD,MAGK;AACHO,QAAAA,EAAE,CAACL,IAAH,GAAUO,KAAK,CAACP,IAAhB;AACAS,QAAAA,IAAI,GAAG,KAAP;AACD;AACF,KARK,MAQA,IAAGF,KAAK,CAACP,IAAN,KAAe,IAAf,IAAuBQ,KAAK,CAACR,IAAN,KAAe,IAAzC,EAA8C;AAClDS,MAAAA,IAAI,GAAG,KAAP;AACD,KAFK,MAED;AACHC,MAAAA,GAAG,GAAGA,GAAG,CAACV,IAAV;AACD;AAEF;;AAED,SAAOK,EAAE,CAACL,IAAV;AACD;;AAEDJ,OAAA,WAAA,GAAeM,aAAf","file":"两数相加.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass ListNode {\n    constructor(val, next) {\n        this.val = (val === undefined ? 0 : val);\n        this.next = (next === undefined ? null : next);\n    }\n}\nfunction addTwoNumbers(l1, l2) {\n    const re = new ListNode();\n    let ten = 0;\n    let item1 = l1;\n    let item2 = l2;\n    let flag = true;\n    let cur = re.next;\n    while (flag) {\n        let n = l1.val + l2.val + ten;\n        ten = n > 10 ? 1 : 0;\n        n %= 10;\n        cur = new ListNode(n);\n        if (item1.next === null && item2.next !== null) {\n            if (ten === 1) {\n                item1 = new ListNode();\n                item2 = item2.next;\n            }\n            else {\n                re.next = item2.next;\n                flag = false;\n            }\n        }\n        else if (item1.next !== null && item2.next === null) {\n            if (ten === 1) {\n                item1 = item1.next;\n                item2 = new ListNode();\n            }\n            else {\n                re.next = item1.next;\n                flag = false;\n            }\n        }\n        else if (item1.next === null && item2.next === null) {\n            flag = false;\n        }\n        else {\n            cur = cur.next;\n        }\n    }\n    return re.next;\n}\nexports.default = addTwoNumbers;\n","/**\n * Definition for singly-linked list.\n */\nclass ListNode {\n  val: number\n  next: ListNode | null\n  constructor(val?: number, next?: ListNode | null) {\n    this.val = (val===undefined ? 0 : val)\n    this.next = (next===undefined ? null : next)\n  }\n}\n\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nfunction addTwoNumbers(l1: ListNode, l2: ListNode): ListNode|null {\n  const re = new ListNode()\n\n  let ten = 0\n  let item1: ListNode|null = l1\n  let item2: ListNode|null = l2\n  let flag = true\n  let cur = re.next\n\n  while(flag){\n    let n = l1.val + l2.val + ten\n    ten = n>10?1:0\n    n %= 10\n    cur = new ListNode(n)\n\n    if(item1.next === null && item2.next !== null){\n      if(ten === 1){\n        item1 = new ListNode()\n        item2 = item2.next\n      }else{\n        re.next = item2.next\n        flag = false\n      }\n    }else if(item1.next !== null && item2.next === null){\n      if(ten === 1){\n        item1 = item1.next\n        item2 = new ListNode()\n      }else{\n        re.next = item1.next\n        flag = false\n      }\n    }else if(item1.next === null && item2.next === null){\n      flag = false\n    }else{\n      cur = cur.next\n    }\n\n  }\n\n  return re.next\n}\n\nexport default addTwoNumbers\n"],"sourceRoot":"../../src"}