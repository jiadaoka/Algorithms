{"version":3,"sources":["freecodecamp/Find_the_Symmetric_Difference.ts"],"names":[],"mappings":"AAAA,UAAU,IAAI;IACZ,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,CAAC;CACxB;AAED,iBAAS,OAAO,CAAE,MAAM,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,GAAG,MAAM,EAAE,GAAG,QAAQ,CAuBzE;AAED,iBAAS,GAAG,CAAE,GAAG,IAAI,EAAE,MAAM,EAAE,EAAE,GAAG,MAAM,EAAE,CAO3C","file":"Find_the_Symmetric_Difference.d.ts","sourcesContent":["interface Item {\n  [key: string]: boolean;\n}\n\nfunction symCall (result: number[], args: number[][]): number[] | Function {\n  const resultArr = []\n  const arr: number[][] = [[...result], [...(args.shift() as number[])]]\n  const arrLength = arr.length\n  const itemObj: Item = {}\n  for (let i1 = 0; i1 < arrLength; i1++) {\n    const arg = [...new Set(arr[i1])]\n    const arr2Length: number = arg.length\n    for (let i2 = 0; i2 < arr2Length; i2++) {\n      if (arg[i2] in itemObj) {\n        itemObj[arg[i2]] = false\n      } else {\n        itemObj[arg[i2]] = true\n      }\n    }\n  }\n\n  for (const i in itemObj) {\n    if (itemObj[i]) resultArr.push(parseInt(i))\n  }\n\n  if (args.length === 0) return resultArr\n  else return symCall(resultArr, args)\n}\n\nfunction sym (...args: number[][]): number[] {\n\n  const _args = [...args]\n  const arrOne = _args.shift() as number[]\n\n  const arr = symCall(arrOne, _args) as number[]\n  return arr\n}\n\nconsole.log(sym([1, 2, 5], [2, 3, 5], [3, 4, 5]))\n"],"sourceRoot":"../../src"}