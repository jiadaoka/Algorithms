{"version":3,"sources":["freecodecamp/Find_the_Symmetric_Difference.js","freecodecamp/Find_the_Symmetric_Difference.ts"],"names":["symCall","result","args","resultArr","arr","shift","arrLength","length","itemObj","i1","arg","Set","arr2Length","i2","i","push","parseInt","sym","_args","arrOne","console","log"],"mappings":"AAAA;;;;;;;;;;;;;;ACIA,SAASA,OAAT,CAAkBC,MAAlB,EAAoCC,IAApC,EAAoD;AAClD,MAAMC,SAAS,GAAG,EAAlB;AACA,MAAMC,GAAG,GAAe,oBAAKH,MAAL,sBAAmBC,IAAI,CAACG,KAAL,EAAnB,EAAxB;AACA,MAAMC,SAAS,GAAGF,GAAG,CAACG,MAAtB;AACA,MAAMC,OAAO,GAAS,EAAtB;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGH,SAAtB,EAAiCG,EAAE,EAAnC,EAAuC;AACrC,QAAMC,GAAG,sBAAO,IAAIC,GAAJ,CAAQP,GAAG,CAACK,EAAD,CAAX,CAAP,CAAT;;AACA,QAAMG,UAAU,GAAWF,GAAG,CAACH,MAA/B;;AACA,SAAK,IAAIM,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGD,UAAtB,EAAkCC,EAAE,EAApC,EAAwC;AACtC,UAAIH,GAAG,CAACG,EAAD,CAAH,IAAWL,OAAf,EAAwB;AACtBA,QAAAA,OAAO,CAACE,GAAG,CAACG,EAAD,CAAJ,CAAP,GAAmB,KAAnB;AACD,OAFD,MAEO;AACLL,QAAAA,OAAO,CAACE,GAAG,CAACG,EAAD,CAAJ,CAAP,GAAmB,IAAnB;AACD;AACF;AACF;;AAED,OAAK,IAAMC,CAAX,IAAgBN,OAAhB,EAAyB;AACvB,QAAIA,OAAO,CAACM,CAAD,CAAX,EAAgBX,SAAS,CAACY,IAAV,CAAeC,QAAQ,CAACF,CAAD,CAAvB;AACjB;;AAED,MAAIZ,IAAI,CAACK,MAAL,KAAgB,CAApB,EAAuB,OAAOJ,SAAP,CAAvB,KACK,OAAOH,OAAO,CAACG,SAAD,EAAYD,IAAZ,CAAd;AACN;;AAED,SAASe,GAAT,GAAiC;AAAA,oCAAhBf,IAAgB;AAAhBA,IAAAA,IAAgB;AAAA;;AAE/B,MAAMgB,KAAK,aAAOhB,IAAP,CAAX;;AACA,MAAMiB,MAAM,GAAGD,KAAK,CAACb,KAAN,EAAf;;AAEA,MAAMD,GAAG,GAAGJ,OAAO,CAACmB,MAAD,EAASD,KAAT,CAAnB;AACA,SAAOd,GAAP;AACD;;AAEDgB,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAZ,EAAuB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAvB,CAAf","file":"Find_the_Symmetric_Difference.js","sourcesContent":["\"use strict\";\nfunction symCall(result, args) {\n    const resultArr = [];\n    const arr = [[...result], [...args.shift()]];\n    const arrLength = arr.length;\n    const itemObj = {};\n    for (let i1 = 0; i1 < arrLength; i1++) {\n        const arg = [...new Set(arr[i1])];\n        const arr2Length = arg.length;\n        for (let i2 = 0; i2 < arr2Length; i2++) {\n            if (arg[i2] in itemObj) {\n                itemObj[arg[i2]] = false;\n            }\n            else {\n                itemObj[arg[i2]] = true;\n            }\n        }\n    }\n    for (const i in itemObj) {\n        if (itemObj[i])\n            resultArr.push(parseInt(i));\n    }\n    if (args.length === 0)\n        return resultArr;\n    else\n        return symCall(resultArr, args);\n}\nfunction sym(...args) {\n    const _args = [...args];\n    const arrOne = _args.shift();\n    const arr = symCall(arrOne, _args);\n    return arr;\n}\nconsole.log(sym([1, 2, 5], [2, 3, 5], [3, 4, 5]));\n","interface Item {\n  [key: string]: boolean;\n}\n\nfunction symCall (result: number[], args: number[][]): number[] | Function {\n  const resultArr = []\n  const arr: number[][] = [[...result], [...(args.shift() as number[])]]\n  const arrLength = arr.length\n  const itemObj: Item = {}\n  for (let i1 = 0; i1 < arrLength; i1++) {\n    const arg = [...new Set(arr[i1])]\n    const arr2Length: number = arg.length\n    for (let i2 = 0; i2 < arr2Length; i2++) {\n      if (arg[i2] in itemObj) {\n        itemObj[arg[i2]] = false\n      } else {\n        itemObj[arg[i2]] = true\n      }\n    }\n  }\n\n  for (const i in itemObj) {\n    if (itemObj[i]) resultArr.push(parseInt(i))\n  }\n\n  if (args.length === 0) return resultArr\n  else return symCall(resultArr, args)\n}\n\nfunction sym (...args: number[][]): number[] {\n\n  const _args = [...args]\n  const arrOne = _args.shift() as number[]\n\n  const arr = symCall(arrOne, _args) as number[]\n  return arr\n}\n\nconsole.log(sym([1, 2, 5], [2, 3, 5], [3, 4, 5]))\n"],"sourceRoot":"../../src"}