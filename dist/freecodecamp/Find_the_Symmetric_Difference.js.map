{"version":3,"sources":["freecodecamp/Find_the_Symmetric_Difference.ts"],"names":[],"mappings":";AAIA,SAAS,OAAO,CAAE,MAAgB,EAAE,IAAgB;IAClD,MAAM,SAAS,GAAG,EAAE,CAAA;IACpB,MAAM,GAAG,GAAe,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,GAAI,IAAI,CAAC,KAAK,EAAe,CAAC,CAAC,CAAA;IACtE,MAAM,SAAS,GAAG,GAAG,CAAC,MAAM,CAAA;IAC5B,MAAM,OAAO,GAAS,EAAE,CAAA;IACxB,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,EAAE,EAAE,EAAE,EAAE;QACrC,MAAM,GAAG,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;QACjC,MAAM,UAAU,GAAW,GAAG,CAAC,MAAM,CAAA;QACrC,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,UAAU,EAAE,EAAE,EAAE,EAAE;YACtC,IAAI,GAAG,CAAC,EAAE,CAAC,IAAI,OAAO,EAAE;gBACtB,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,CAAA;aACzB;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAA;aACxB;SACF;KACF;IAED,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;QACvB,IAAI,OAAO,CAAC,CAAC,CAAC;YAAE,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;KAC5C;IAED,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,SAAS,CAAA;;QAClC,OAAO,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAA;AACtC,CAAC;AAED,SAAS,GAAG,CAAE,GAAG,IAAgB;IAE/B,MAAM,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,CAAA;IACvB,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,EAAc,CAAA;IAExC,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,KAAK,CAAa,CAAA;IAC9C,OAAO,GAAG,CAAA;AACZ,CAAC;AAED,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAA","file":"Find_the_Symmetric_Difference.js","sourcesContent":["interface Item {\n  [key: string]: boolean;\n}\n\nfunction symCall (result: number[], args: number[][]): number[] | Function {\n  const resultArr = []\n  const arr: number[][] = [[...result], [...(args.shift() as number[])]]\n  const arrLength = arr.length\n  const itemObj: Item = {}\n  for (let i1 = 0; i1 < arrLength; i1++) {\n    const arg = [...new Set(arr[i1])]\n    const arr2Length: number = arg.length\n    for (let i2 = 0; i2 < arr2Length; i2++) {\n      if (arg[i2] in itemObj) {\n        itemObj[arg[i2]] = false\n      } else {\n        itemObj[arg[i2]] = true\n      }\n    }\n  }\n\n  for (const i in itemObj) {\n    if (itemObj[i]) resultArr.push(parseInt(i))\n  }\n\n  if (args.length === 0) return resultArr\n  else return symCall(resultArr, args)\n}\n\nfunction sym (...args: number[][]): number[] {\n\n  const _args = [...args]\n  const arrOne = _args.shift() as number[]\n\n  const arr = symCall(arrOne, _args) as number[]\n  return arr\n}\n\nconsole.log(sym([1, 2, 5], [2, 3, 5], [3, 4, 5]))\n"],"sourceRoot":"../../src"}